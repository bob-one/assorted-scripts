#!/bin/env bash

MD_NOTE="$HOME/Documents/Finance/$(date +%Y-%m).md"
NOTE="$HOME/Documents/Finance/buffer-$(date +%Y-%m)"
PDF_NOTE="$HOME/Documents/Finance/pdf/$(date +%Y-%m).pdf"
PDF_DIR="$HOME/Documents/Finance/pdf"
PIE_CHART="$HOME/Documents/Finance/plot/pie.png"

createMarkDown () {
    echo -e "---\ntitle: Financial Report\nauthor: André Rønning\ndate: $(date +%B-%Y)\ngeometry: margin=3cm\n---\n\n| date | Description | in | out |\n|------|-------------|----:|:-----|" > $MD_NOTE
    readarray -t array < $NOTE
    for line in ${array[@]}
    do
        if [[ "$line" != "" ]]; then
            money=$(echo "$line" | awk -F ":" '{print $1}')
            desc=$(echo "$line" | awk -F ":" '{print $2}')
            mark=$(echo "$line" | awk -F ":" '{print $3}') # b=bills, f=food, c=clothes, l=luxoury, s=subscriptions, i=income, t=tobacco
            date=$(date +%Y-%m-%d)
            
            if [[ $money -gt 0 ]]; then
                totalIn=$(( totalIn + money ))
                echo "|$date|$desc|$money| |" >> $MD_NOTE
            elif [[ $money -le 0 ]]; then
                totalOut=$(( totalOut + money ))
                echo "|$date|$desc| |$money|" >> $MD_NOTE
            fi

            if [[ "$mark" == "b" ]]; then
                bill=$(( bill + money ))
            elif [[ "$mark" == "f" ]]; then
                food=$(( food + money ))
            elif [[ "$mark" == "c" ]]; then
                clothes=$(( clothes + money ))
            elif [[ "$mark" == "l" ]]; then
                luxoury=$(( luxoury + money ))
            elif [[ "$mark" == "s" ]]; then
                subscriptions=$(( subscriptions + money ))
            elif [[ "$mark" == "i" ]]; then
                income=$(( income + money ))
            elif [[ "$mark" == "t" ]]; then
                tobacco=$(( tobacco + money ))
            fi
        fi
    done

    balance=$(( totalIn + totalOut ))
    echo -e "\n\n| Total in | Total out | Balance |" >> $MD_NOTE
    echo "|----------|-----------|---------|" >> $MD_NOTE
    echo -e "| $totalIn | $totalOut | $balance |\n\n" >> $MD_NOTE

    /usr/bin/python $HOME/Scripts/Programs/assorted-scripts/create_financial_plot.py -b $bill -c $clothes -f $food -l $luxoury -s $subscriptions -t $tobacco
    echo "![pie-chart]($PIE_CHART)" >> $MD_NOTE

    pandoc -o $PDF_NOTE $MD_NOTE &
    
}
# create table in markdown with coloumns: deposit, withdraws, reason, date from the values inputted in main file
# calculate total deposits, total withdraws and balance trend for each month
# create pdf with table and calculations
# also include pie chart with bills, food, clothes and luxoury

if [[ "$1" == "v" ]]; then
    PDF_LIST=($PDF_DIR/*)
    PDF=$(printf '%s\n' "${PDF_LIST[@]}" | awk -F "/" '{print $NF}' | dmenu -i -c -l 20 -p "PDF summary: ")
    [[ ! "$PDF" ]] && exit 1 || zathura "$PDF_DIR/$PDF"

else
    [[ ! -f $MD_NOTE ]] && touch $NOTE
    [[ ! -f $MD_NOTE ]] && ( echo -e "---\ntitle: Financial Report\nauthor: André Rønning\ndate: $(date +%B-%Y)\ngeometry: margin=3cm\n---\n\n" > $MD_NOTE)
    [[ ! -f $PDF_NOTE ]] && (touch $PDF_NOTE)

    alacritty -t Notes -e nvim -c "norm Go" \
         -c "norm zz" $NOTE
    createMarkDown    
fi

# I make sure that ~/.local/bin/ or ~/.local/share/ is in my path
# and symlink it to one of these locations as n
# Then i add {'wname': 'Notes'}, to my floating_rules in the Qtile config
# now I can add it to a keybinding in sxhkd or call it from the terminal
# and open up a floating window, in vim, to take notes in using markdown
# and each new day a new file is created using that days date in the filename
# also each entry gets timestamped automatically inside the document
# I use the keybinding super n to open it in vim, and super shift n to view the pdf version of it
